/*
 * AutonomousMain.h
 *
 *  Created on: Jul 1, 2017
 *      Author: cryog
 */

#ifndef AUTONOMOUSMAIN_H_
#define AUTONOMOUSMAIN_H_

#include "unregisteredModules/AutonomousEntry.h"


namespace AutonomousPrivate{
	bool running;
	static frc::Timer* autoTimer = new frc::Timer();
	static vector<Module*> autoModules;
	static vector<unsigned long> autoModuleIds;
	map<unsigned long, AutonomousEntry*> autoData;
}
class Autonomous : public Module{
public:
	void ModuleInit(){
		frc::SmartDashboard::SetDefaultNumber("Starting position (1, 2 or 3)", 0);
		AutonomousPrivate::autoTimer->Reset();
		AutonomousPrivate::autoTimer->Stop();
	}
	Autonomous(){
	}
	void ModeChange(){
		AutonomousPrivate::autoTimer->Reset();
		AutonomousPrivate::autoTimer->Stop();
	}
	static void registerAutoModule(Module* m){
		unsigned long tmid = m->ModuleId();
		AutonomousPrivate::autoModules.push_back(m);
		AutonomousPrivate::autoModuleIds.push_back(tmid);
		AutonomousPrivate::autoData.emplace(tmid, new AutonomousEntry());
	}
	void ClearAuto(){
		for(unsigned long id : AutonomousPrivate::autoModuleIds){
			AutonomousPrivate::autoData[id]->ixS = 0;
			AutonomousPrivate::autoData[id]->ixV = 0;
			AutonomousPrivate::autoData[id]->clear();

		}
	}
	vector<double> getAutonomousData(Module* m){
		unsigned long id = m->ModuleId();
		double d = AutonomousPrivate::autoData[id]->peekAtNextValues()->second;
		if(d > AutonomousPrivate::autoTimer->Get()){
			return AutonomousPrivate::autoData[id]->getNextValues()->first;
		}
		return NULL;
	}
};

#endif /* AUTONOMOUSMAIN_H_ */
