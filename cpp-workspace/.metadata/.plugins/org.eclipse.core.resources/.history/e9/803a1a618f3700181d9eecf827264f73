/*
 * Cubelift.h
 */


#ifndef CUBELIFT_H_
#define CUBELIFT_H_

class Cubelift : public Module {
private:
	double encoderHeight;
	bool hasBeenMoved = false;
	double correct_up_power = .35;
	double correct_down_power = 0.0;
	double correct_accept_range = 0;
	bool a = false;
	unsigned long topEncPos;
	unsigned long botEncPos;
	unsigned long encPos0;
	unsigned long encPos[2];

	unsigned long cEncPos = 0;
	int debugState;

	double upow = 1.0;
	double dpow = 0.7;
public:
	 void OperatorControl(){
		 debugState = 0;
		 cEncPos += hw::liE->Get();
		 if(isDebugMode()){
			 bool dbgBut = hw::stick->GetRawButton(5);
			 if(dbgBut){
				 switch(debugState){
				 case 0:
					 topEncPos =
				 }
			 }
		 }
#ifdef CONTROLLER_ALT_1
			bool up = hw::stick->GetRawButton(6);
			bool down  = hw::stick->GetRawButton(4);

			bool top =false; hw::topBkInput->Get();
			bool bot =false; hw::botBkInput->Get();
#else
			bool up = hw::stick->GetRawButton(8);
			bool down  = hw::stick->GetRawButton(6);
#endif
#ifndef PRAC_BOT
			double quadPos = hw::actualTalon->GetSensorCollection().GetQuadraturePosition();
#else
			double quadPos = 0.0;
#endif
			// Buttons to control the upwards and downwards motion of the cube lift
			if(up){
				if (!top){
#ifdef PRAC_BOT
					hw::actualTalon->Set(-upow);		//upwards motion of cube lift
					hw::actualTalon2->Set(-upow);		//upwards motion of cube lift
#else
					hw::actualTalon->Set(upow);		//upwards motion of cube lift
					hw::actualTalon2->Set(upow);		//upwards motion of cube lift
#endif
					hasBeenMoved = true;
					a = false;
				}
			} else if(down){
				if (!bot){
#ifdef PRAC_BOT
					hw::actualTalon->Set(dpow); //downwards motion of cube lift
					hw::actualTalon->Set(dpow); //downwards motion of cube lift
#else
					hw::actualTalon->Set(-dpow); //downwards motion of cube lift
					hw::actualTalon2->Set(-dpow); //downwards motion of cube lift
#endif
					hasBeenMoved = true;
					a = false;
				}
			} else{
				hw::actualTalon->Set(0);		//No motion
				hw::actualTalon2->Set(0);		//No motion
			}
			if(hasBeenMoved && !(top || bot)){ // Test whether the correction code should kick in
				if(!a){ // `a` becomes false when the lift is moved, but becomes true when the lift is released. This tells it not to change the saved `encoderHeight` when the lift isn't supposed to be moving
					encoderHeight = quadPos; // Sets `encoderHeight` to the proper value to keep the lift at the right height
					a = true; // Makes sure that `encoderHeight` isn't changed while it's correcting the height
				}
				if(fabs(quadPos - encoderHeight) < correct_accept_range){ // The lift is perfectly located
					hw::actualTalon->Set(0);		//No motion
					hw::actualTalon2->Set(0);		//No motion
				} else if(quadPos > encoderHeight){ // Move the lift up; the lift is below the proper height
					hw::actualTalon->Set(correct_up_power);
					hw::actualTalon2->Set(correct_up_power);
				} else if(quadPos < encoderHeight){ // Move the lift down; the lift is above the proper height
					hw::actualTalon->Set(correct_down_power);
					hw::actualTalon2->Set(correct_down_power);
				} else{
				}
			}

			SmartDashboard::PutNumber("Talon Encoder (Port 1)", quadPos);

	}

	void Autonomous(){

	}

	void ModuleInit(){
		ifstream ifs("CLdata.txt");
		if(!ifs.is_open()){
			cout << "Error loading cube lift data.";
			topEncPos = -1;
			botEncPos = 0;
			encPos0 = 0.0;
			encPos[0] = 0.0;
			encPos[1] = 0.0;
			return;
		}
		ifs >> topEncPos;
		ifs >> botEncPos;
		ifs >> encPos0;
		for(int a=0; a<2; a++){
			ifs >> encPos[a];
		}
		ifs.close();
	}
};

#endif /* BUCKET_H_ */



